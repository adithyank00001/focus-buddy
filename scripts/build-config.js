#!/usr/bin/env node

// Build script to populate configuration from .env file
// This script reads the .env file and updates the setup-config.js file

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Read .env file
function readEnvFile() {
  const envPath = path.join(__dirname, "..", ".env");

  if (!fs.existsSync(envPath)) {
    console.log("No .env file found. Using default values.");
    return {
      OPENAI_API_KEY: "",
      OPENAI_MODEL: "gpt-4o-mini",
    };
  }

  const envContent = fs.readFileSync(envPath, "utf8");
  const envVars = {};

  envContent.split("\n").forEach((line) => {
    const trimmedLine = line.trim();
    if (trimmedLine && !trimmedLine.startsWith("#")) {
      const [key, ...valueParts] = trimmedLine.split("=");
      if (key && valueParts.length > 0) {
        envVars[key.trim()] = valueParts.join("=").trim();
      }
    }
  });

  return envVars;
}

// Update config.js file
function updateConfig(envVars) {
  const configPath = path.join(__dirname, "config.js");

  // Generate the ES module config content
  const configContent = `// This file is generated by the build script. DO NOT EDIT MANUALLY.
// Environment configuration loaded from .env file
export const ENV_CONFIG = {
  OPENAI_API_KEY: "${envVars.OPENAI_API_KEY || ""}",
  OPENAI_MODEL: "${envVars.OPENAI_MODEL || "gpt-4o-mini"}",
};

// Make environment config available globally for backward compatibility
if (typeof window !== "undefined") {
  window.ENV_CONFIG = ENV_CONFIG;
}

if (typeof globalThis !== "undefined") {
  globalThis.ENV_CONFIG = ENV_CONFIG;
}
`;

  fs.writeFileSync(configPath, configContent);
  console.log("Updated config.js with environment variables");
}

// Main execution
function main() {
  try {
    console.log("Reading environment variables from .env file...");
    const envVars = readEnvFile();

    console.log("Environment variables found:", {
      hasApiKey: !!envVars.OPENAI_API_KEY,
      model: envVars.OPENAI_MODEL || "gpt-4o-mini",
    });

    console.log("Updating config.js...");
    updateConfig(envVars);

    console.log("Configuration build complete!");
  } catch (error) {
    console.error("Error during configuration build:", error);
    process.exit(1);
  }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { readEnvFile, updateConfig };
